var express = require('express');
var router = express.Router();
var db = require('../db');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const { logUserAction } = require('../logUserAction');


router.post('/login', (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });
  }

  const query = `
    SELECT login.*, role.role_id, profiles.image_path, users.is_active
    FROM login
    JOIN users ON login.user_id = users.user_id
    JOIN role ON users.role_id = role.role_id
    JOIN profiles ON users.user_id = profiles.user_id
    WHERE login.username = ?
  `;

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ success: false, message: 'Database error' });
    }

    if (results.length === 0) {
      return res.status(401).json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const user = results[0];

    if (!user.password) {
      return res.status(500).json({ success: false, message: 'Password hash is missing in database' });
    }

    bcrypt.compare(password, user.password, (err, match) => {
      if (err) {
        console.error('Error comparing passwords:', err);
        return res.status(500).json({ success: false, message: 'Error comparing password' });
      }

      if (!match) {
        return res.status(401).json({ success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }

      if (parseInt(user.is_active) === 0) {
        return res.status(403).json({ success: false, message: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" });
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
      req.session.user = { id: user.user_id, username: user.username, role: user.role_id };

      // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ alumni (role=3) ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ admin
      const firstLogin = parseInt(user.role_id) === 3 && user.is_first_login === 1;

      res.json({
        success: true,
        message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        userId: user.user_id,
        role: user.role_id,
        username: user.username,
        image_path: user.image_path,
        firstLogin
      });
    });
  });
});



// Logout Route
router.get('/logout', (req, res) => {
  // ‡∏•‡∏ö session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  req.session.destroy((err) => {
    if (err) {
      return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö" });
    }
    // ‡∏•‡∏ö cookie 
    res.clearCookie('connect.sid');

    return res.status(200).json({ message: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  });
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á transport ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
var transport = nodemailer.createTransport({
  host: "sandbox.smtp.mailtrap.io",
  port: 2525,
  auth: {
    user: "890a09f6088d79",
    pass: "1bad5ab925e61b"
  }
});


//‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£ hash password
// const password = "Admin12345678";
// bcrypt.hash(password, 10, (err, hash) => {
//   if (err) throw err;
//   console.log("Hashed password:", hash);

//   const query = 'UPDATE login SET password = ? WHERE username = ?';
//   db.query(query, [hash, 'ad_min'], (err, result) => {
//     if (err) throw err;
//     console.log('Password updated!');
//   });
// }); 


// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
router.post('/change-password', (req, res) => {
  const { userId, newPassword } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
  if (!userId || !newPassword) {
    return res.status(400).send("Missing required fields");
  }

  bcrypt.hash(newPassword, 10, (err, hashedPassword) => {
    if (err) return res.status(500).send('Error hashing password');

    db.query(
      'UPDATE login SET password = ?, is_first_login = FALSE WHERE user_id = ?',
      [hashedPassword, userId],
      (err, results) => {
        if (err) return res.status(500).send('Database error');
        return res.status(200).send('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    );
  });
});

// ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
const dayjs = require("dayjs");
const utc = require("dayjs/plugin/utc");
const timezone = require("dayjs/plugin/timezone");
dayjs.extend(utc);
dayjs.extend(timezone);

router.post("/forgot-password", (req, res) => {
  const { email } = req.body;
  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  const otpExpiry = dayjs().tz("Asia/Bangkok").add(10, "minute").format("YYYY-MM-DD HH:mm:ss");

  // console.log("üì® Email ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤:", email);
  // console.log("üîß OTP:", otp, "| ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:", otpExpiry);

  const sql = `
    SELECT u.user_id FROM users u
    JOIN profiles p ON u.user_id = p.user_id
    WHERE p.email = ?
  `;

  db.query(sql, [email], (err, result) => {
    if (err) return res.status(500).json({ success: false, message: "Database error" });
    if (!result || result.length === 0) return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });

    const userId = result[0].user_id;

    console.log("üì¶ ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP:", { otp, otpExpiry, userId });

    db.query(
      `UPDATE users SET otp = ?, otp_expiry = ? WHERE user_id = ?`,
      [otp, otpExpiry, userId],
      (err, updateResult) => {
        if (err) {
          console.error("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
          return res.status(500).json({ success: false, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
        }

        console.log("‚úÖ OTP ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß:", updateResult);
        transport.sendMail({
          from: '"Alumni System" <no-reply@alumni.com>',
          to: email,
          subject: "OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          html: `<p>‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: <strong>${otp}</strong> (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ)</p>`,
        }, (err, info) => {
          if (err) return res.status(500).json({ success: false, message: "‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
          console.log("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", info.messageId);
          res.json({ success: true });
        });
      }
    );
  });
});


// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
router.post("/reset-password", (req, res) => {
  const { email, otp, newPassword } = req.body;

  const query = `
    SELECT u.user_id, u.otp, u.otp_expiry FROM users u
    JOIN profiles p ON u.user_id = p.user_id
    WHERE p.email = ?
  `;

  db.query(query, [email], (err, results) => {
    if (err) return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    if (results.length === 0) return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•" });

    const user = results[0];
    const storedOtp = user.otp;
    const otpExpiry = dayjs(user.otp_expiry).tz("Asia/Bangkok");
    const now = dayjs().tz("Asia/Bangkok");

    // console.log("üîê ‡∏ï‡∏£‡∏ß‡∏à OTP:", {
    //   storedOtp,
    //   clientOtp: otp,
    //   otpExpiry: otpExpiry.format(),
    //   now: now.format()
    // });

    if (String(storedOtp) !== String(otp).trim() || now.isAfter(otpExpiry)) {
      return res.status(400).json({ success: false, message: "OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
    }


    bcrypt.hash(newPassword, 10, (err, hashedPassword) => {
      if (err) return res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ" });

      db.query("UPDATE login SET password = ? WHERE user_id = ?", [hashedPassword, user.user_id], (err) => {
        if (err) return res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ" });

        // ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô DB ‡πÄ‡∏õ‡πá‡∏ô NULL ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        db.query("UPDATE users SET otp = NULL, otp_expiry = NULL WHERE user_id = ?", [user.user_id], (err) => {
          if (err) return res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á OTP ‡πÑ‡∏î‡πâ" });

          res.json({ success: true, message: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà" });
        });
      });
    });
  });
});


// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
router.post('/check-studentId', (req, res) => {
  const { studentId } = req.body;
  if (!studentId) return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤' });
  // console.log('Received studentId:', studentId);

  let query = '';
  let param = '';

  if (/^\d{9}-\d$/.test(studentId)) {
    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ï‡πá‡∏° ‡πÄ‡∏ä‡πà‡∏ô 653380253-3
    query = `
      SELECT e.studentId, e.graduation_year, 
             p.full_name, d.degree_name, m.major_name
      FROM educations e
      JOIN profiles p ON e.user_id = p.user_id
      JOIN degree d ON e.degree_id = d.degree_id
      JOIN major m ON e.major_id = m.major_id
      WHERE e.studentId = ?
    `;
    param = studentId;
  } else if (/^\d{3}-\d$/.test(studentId)) {
    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏™‡πà 4 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô 253-3
    query = `
      SELECT e.studentId, e.graduation_year, 
             p.full_name, d.degree_name, m.major_name
      FROM educations e
      JOIN profiles p ON e.user_id = p.user_id
      JOIN degree d ON e.degree_id = d.degree_id
      JOIN major m ON e.major_id = m.major_id
      WHERE e.studentId LIKE ?
    `;
    param = `%${studentId}`;
  } else {
    return res.status(400).json({ message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }

  db.query(query, [param], (err, results) => {
    if (err) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:', err);
      return res.status(500).json({ success: false, message: 'Database error' });
    }

    if (results.length > 0) {
      return res.status(200).json({ success: true, message: '‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', data: results[0] });
    } else {
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
  });
});


module.exports = router;
